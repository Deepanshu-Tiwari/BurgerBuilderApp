{"version":3,"sources":["components/Layout/Layout.js","components/Burger/BurgerIngredient/BurgerIngredient.js","components/Burger/Burger.js","containers/BurgerBuilder/BurgerBuilder.js","App.js","serviceWorker.js","index.js"],"names":["layout","props","className","children","BurgerIngredient","ingredient","this","type","Component","Burger","transformedIngredient","Object","keys","ingredients","map","igkey","Array","_","i","key","reduce","arr","el","concat","length","BurgerBuilder","state","salad","bacon","cheese","meat","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8TAYeA,G,YATA,SAACC,GAAD,OACX,6BACA,2DACA,0BAAMC,UAAU,WACXD,EAAME,a,OCuCAC,G,mLAzCP,IAAIC,EAAa,KAErB,OAAOC,KAAKL,MAAMM,MACd,IAAK,eACLF,EAAY,yBAAKH,UAAU,gBAC3B,MAEA,IAAK,YACLG,EAAW,yBAAKH,UAAU,YACtB,yBAAKA,UAAU,WACf,yBAAKA,UAAU,YAEnB,MAEA,IAAK,OACLG,EAAW,yBAAKH,UAAU,SAC1B,MAEA,IAAK,SACLG,EAAW,yBAAKH,UAAU,WAC1B,MAEA,IAAK,QACLG,EAAW,yBAAKH,UAAU,UAC1B,MAEA,IAAK,QACLG,EAAW,yBAAKH,UAAU,UAC1B,MAEA,QACAG,EAAW,KAEf,OAAOA,M,GAnCoBG,cC4BhBC,EA1BA,SAACR,GACZ,IAAIS,EAAwBC,OAAOC,KAAKX,EAAMY,aAC7CC,KAAI,SAAAC,GACD,OAAM,YAAIC,MAAMf,EAAMY,YAAYE,KACjCD,KAAI,SAACG,EAAEC,GACJ,OAAO,kBAAC,EAAD,CAAkBC,IAAKJ,EAAMG,EAAGX,KAAMQ,UAGpDK,QAAO,SAACC,EAAIC,GACT,OAAOD,EAAIE,OAAOD,KACpB,IAOF,OAJkC,IAA/BZ,EAAsBc,SACrBd,EAAsB,+DAItB,yBAAKR,UAAU,UACX,kBAAC,EAAD,CAAkBK,KAAK,cACtBG,EACD,kBAAC,EAAD,CAAkBH,KAAK,mBCCpBkB,E,4MAtBXC,MAAM,CACFb,YAAc,CACVc,MAAM,EACNC,MAAM,EACNC,OAAO,EACPC,KAAK,I,uDAMT,OACI,6BACI,kBAAC,EAAD,CAAQjB,YAAaP,KAAKoB,MAAMb,cAChC,mD,GAfYL,aCcbuB,E,uKAXX,OAEE,yBAAK7B,UAAU,OACb,kBAAC,EAAD,KACE,kBAAC,EAAD,Y,GANQM,aCOEwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7b2fd17e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"../Layout/Layout.css\";\r\n\r\nconst layout = (props)=> (\r\n    <div>\r\n    <div >Toolbar, Sidebar, Backdrop</div>\r\n    <main className=\"Content\">\r\n        {props.children}\r\n    </main>\r\n    </div>\r\n);\r\n\r\nexport default layout;","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass BurgerIngredient extends Component {\r\n    render(){\r\n        let ingredient = null;\r\n\r\n    switch(this.props.type){\r\n        case(\"bread-bottom\"):\r\n        ingredient= <div className=\"BreadBottom\"></div>;\r\n        break;\r\n        \r\n        case(\"bread-top\"):\r\n        ingredient=<div className=\"BreadTop\">\r\n            <div className=\"Seeds1\"></div>\r\n            <div className=\"Seeds2\"></div>\r\n        </div>;\r\n        break;\r\n        \r\n        case(\"meat\"):\r\n        ingredient=<div className=\"Meat\"></div>;\r\n        break;\r\n\r\n        case(\"cheese\"):\r\n        ingredient=<div className=\"Cheese\"></div>;\r\n        break;\r\n\r\n        case(\"salad\"):\r\n        ingredient=<div className=\"Salad\"></div>;\r\n        break;\r\n\r\n        case(\"bacon\"):\r\n        ingredient=<div className=\"Bacon\"></div>;\r\n        break;\r\n\r\n        default: \r\n        ingredient=null;\r\n    }\r\n    return ingredient;\r\n}\r\n}\r\n\r\nBurgerIngredient.propTypes = {\r\n    type:PropTypes.string.isRequired\r\n};\r\n\r\nexport default BurgerIngredient;","import React from \"react\";\r\nimport \"../Burger/Burger.css\";\r\nimport \"../Burger/BurgerIngredient/BurgerIngredient.css\";\r\nimport BurgerIngredient from \"./BurgerIngredient/BurgerIngredient\";\r\n\r\nconst Burger = (props)=>{\r\n    let transformedIngredient = Object.keys(props.ingredients)\r\n    .map(igkey=>{\r\n        return[...Array(props.ingredients[igkey])]\r\n        .map((_,i)=>{\r\n            return <BurgerIngredient key={igkey+i} type={igkey}/>\r\n        })\r\n    })\r\n    .reduce((arr,el)=>{\r\n        return arr.concat(el);\r\n    },[]);\r\n    // console.log(transformedIngredient);\r\n\r\n    if(transformedIngredient.length===0){\r\n        transformedIngredient=<p>Please start adding ingrediets!</p>\r\n    }\r\n\r\n    return(\r\n        <div className=\"Burger\">\r\n            <BurgerIngredient type=\"bread-top\"/>\r\n            {transformedIngredient}\r\n            <BurgerIngredient type=\"bread-bottom\"/>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Burger;","import React, { Component } from \"react\";\r\nimport Burger from \"../../components/Burger/Burger\";\r\n\r\n\r\nclass BurgerBuilder extends Component{\r\n    state={\r\n        ingredients : {\r\n            salad:0,\r\n            bacon:0,\r\n            cheese:0,\r\n            meat:0\r\n        }\r\n    }\r\n\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                <Burger ingredients={this.state.ingredients}/>\r\n                <div>BurgerControl</div>\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default BurgerBuilder;","import React, { Component } from 'react';\nimport './App.css';\nimport Layout from \"./components/Layout/Layout\";\nimport BurgerBuilder from './containers/BurgerBuilder/BurgerBuilder';\n\nclass App extends Component{\n  render(){\n    return(\n      \n      <div className=\"App\">\n        <Layout>\n          <BurgerBuilder/>\n        </Layout>\n      </div>\n\n    )\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}