{"version":3,"sources":["components/Layout/Layout.js","components/Burger/BurgerIngredient/BurgerIngredient.js","components/Burger/Burger.js","components/Burger/BuildControls/BuildControl/BuildControl.js","components/Burger/BuildControls/BuildControls.js","containers/BurgerBuilder/BurgerBuilder.js","App.js","serviceWorker.js","index.js"],"names":["layout","props","className","children","BurgerIngredient","ingredient","this","type","Component","Burger","transformedIngredient","Object","keys","ingredients","map","igkey","Array","_","i","key","reduce","arr","el","concat","length","BuildControl","label","controls","BuildControls","ctrl","BurgerBuilder","state","salad","bacon","cheese","meat","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kWAYeA,G,YATA,SAACC,GAAD,OACX,6BACA,2DACA,0BAAMC,UAAU,WACXD,EAAME,a,OCuCAC,G,mLAzCP,IAAIC,EAAa,KAErB,OAAOC,KAAKL,MAAMM,MACd,IAAK,eACLF,EAAY,yBAAKH,UAAU,gBAC3B,MAEA,IAAK,YACLG,EAAW,yBAAKH,UAAU,YACtB,yBAAKA,UAAU,WACf,yBAAKA,UAAU,YAEnB,MAEA,IAAK,OACLG,EAAW,yBAAKH,UAAU,SAC1B,MAEA,IAAK,SACLG,EAAW,yBAAKH,UAAU,WAC1B,MAEA,IAAK,QACLG,EAAW,yBAAKH,UAAU,UAC1B,MAEA,IAAK,QACLG,EAAW,yBAAKH,UAAU,UAC1B,MAEA,QACAG,EAAW,KAEf,OAAOA,M,GAnCoBG,cC4BhBC,EA1BA,SAACR,GACZ,IAAIS,EAAwBC,OAAOC,KAAKX,EAAMY,aAC7CC,KAAI,SAAAC,GACD,OAAM,YAAIC,MAAMf,EAAMY,YAAYE,KACjCD,KAAI,SAACG,EAAEC,GACJ,OAAO,kBAAC,EAAD,CAAkBC,IAAKJ,EAAMG,EAAGX,KAAMQ,UAGpDK,QAAO,SAACC,EAAIC,GACT,OAAOD,EAAIE,OAAOD,KACpB,IAOF,OAJkC,IAA/BZ,EAAsBc,SACrBd,EAAsB,+DAItB,yBAAKR,UAAU,UACX,kBAAC,EAAD,CAAkBK,KAAK,cACtBG,EACD,kBAAC,EAAD,CAAkBH,KAAK,mBCfpBkB,G,YARK,SAACxB,GAAD,OAChB,yBAAKC,UAAU,gBACX,yBAAKA,UAAU,SAASD,EAAMyB,OAC9B,4BAAQxB,UAAU,QAAlB,QACA,4BAAQA,UAAU,QAAlB,WCHFyB,EAAW,CACb,CAACD,MAAM,QAAUnB,KAAK,SACtB,CAACmB,MAAM,QAASnB,KAAK,SACrB,CAACmB,MAAM,SAAUnB,KAAK,UACtB,CAACmB,MAAM,OAAQnB,KAAK,SAeTqB,EAVO,SAAC3B,GACnB,OACI,yBAAKC,UAAU,iBACVyB,EAASb,KAAI,SAAAe,GAAI,OACd,kBAAC,EAAD,CAAcV,IAAKU,EAAKV,IAAMO,MAAOG,EAAKH,aCU3CI,E,4MAtBXC,MAAM,CACFlB,YAAc,CACVmB,MAAM,EACNC,MAAM,EACNC,OAAO,EACPC,KAAK,I,uDAMT,OACI,6BACI,kBAAC,EAAD,CAAQtB,YAAaP,KAAKyB,MAAMlB,cAChC,kBAAC,EAAD,W,GAfYL,aCcb4B,E,uKAXX,OAEE,yBAAKlC,UAAU,OACb,kBAAC,EAAD,KACE,kBAAC,EAAD,Y,GANQM,aCOE6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ef49a410.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"../Layout/Layout.css\";\r\n\r\nconst layout = (props)=> (\r\n    <div>\r\n    <div >Toolbar, Sidebar, Backdrop</div>\r\n    <main className=\"Content\">\r\n        {props.children}\r\n    </main>\r\n    </div>\r\n);\r\n\r\nexport default layout;","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass BurgerIngredient extends Component {\r\n    render(){\r\n        let ingredient = null;\r\n\r\n    switch(this.props.type){\r\n        case(\"bread-bottom\"):\r\n        ingredient= <div className=\"BreadBottom\"></div>;\r\n        break;\r\n        \r\n        case(\"bread-top\"):\r\n        ingredient=<div className=\"BreadTop\">\r\n            <div className=\"Seeds1\"></div>\r\n            <div className=\"Seeds2\"></div>\r\n        </div>;\r\n        break;\r\n        \r\n        case(\"meat\"):\r\n        ingredient=<div className=\"Meat\"></div>;\r\n        break;\r\n\r\n        case(\"cheese\"):\r\n        ingredient=<div className=\"Cheese\"></div>;\r\n        break;\r\n\r\n        case(\"salad\"):\r\n        ingredient=<div className=\"Salad\"></div>;\r\n        break;\r\n\r\n        case(\"bacon\"):\r\n        ingredient=<div className=\"Bacon\"></div>;\r\n        break;\r\n\r\n        default: \r\n        ingredient=null;\r\n    }\r\n    return ingredient;\r\n}\r\n}\r\n\r\nBurgerIngredient.propTypes = {\r\n    type:PropTypes.string.isRequired\r\n};\r\n\r\nexport default BurgerIngredient;","import React from \"react\";\r\nimport '../Burger/Burger.css';\r\nimport '../Burger/BurgerIngredient/BurgerIngredient.css';\r\nimport BurgerIngredient from './BurgerIngredient/BurgerIngredient';\r\n\r\nconst Burger = (props)=>{\r\n    let transformedIngredient = Object.keys(props.ingredients)\r\n    .map(igkey=>{\r\n        return[...Array(props.ingredients[igkey])]\r\n        .map((_,i)=>{\r\n            return <BurgerIngredient key={igkey+i} type={igkey}/>\r\n        })\r\n    })\r\n    .reduce((arr,el)=>{\r\n        return arr.concat(el);\r\n    },[]);\r\n    // console.log(transformedIngredient);\r\n\r\n    if(transformedIngredient.length===0){\r\n        transformedIngredient=<p>Please start adding ingrediets!</p>\r\n    }\r\n\r\n    return(\r\n        <div className=\"Burger\">\r\n            <BurgerIngredient type=\"bread-top\"/>\r\n            {transformedIngredient}\r\n            <BurgerIngredient type=\"bread-bottom\"/>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Burger;","import React from \"react\";\r\nimport './BuildControl.css';\r\n\r\nconst BuildControl =(props)=>(\r\n    <div className=\"BuildControl\">\r\n        <div className=\"Label\">{props.label}</div>\r\n        <button className=\"Less\">Less</button>\r\n        <button className=\"More\">More</button>\r\n    </div>\r\n);\r\n\r\nexport default BuildControl;","import React from \"react\";\r\nimport './BuildControls.css';\r\nimport BuildControl from \"./BuildControl/BuildControl\";\r\n\r\nconst controls = [\r\n    {label:\"Salad\" , type:\"Salad\"},\r\n    {label:\"Bacon\", type:\"Bacon\"},\r\n    {label:\"Cheese\", type:\"Cheese\"},\r\n    {label:\"Meat\", type:\"Meat\"}\r\n]\r\n\r\n\r\n\r\nconst BuildControls = (props)=>{\r\n    return(\r\n        <div className=\"BuildControls\">\r\n            {controls.map(ctrl=>(\r\n                <BuildControl key={ctrl.key}  label={ctrl.label}/>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BuildControls;","import React, { Component } from \"react\";\r\nimport Burger from \"../../components/Burger/Burger\";\r\nimport BuildControls from \"../../components/Burger/BuildControls/BuildControls\";\r\n\r\nclass BurgerBuilder extends Component{\r\n    state={\r\n        ingredients : {\r\n            salad:0,\r\n            bacon:0,\r\n            cheese:0,\r\n            meat:0\r\n        }\r\n    }\r\n\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                <Burger ingredients={this.state.ingredients}/>\r\n                <BuildControls/>\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default BurgerBuilder;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Layout from './components/Layout/Layout';\r\nimport BurgerBuilder from './containers/BurgerBuilder/BurgerBuilder';\r\n\r\nclass App extends Component{\r\n  render(){\r\n    return(\r\n      \r\n      <div className=\"App\">\r\n        <Layout>\r\n          <BurgerBuilder/>\r\n        </Layout>\r\n      </div>\r\n\r\n    )\r\n  }\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}